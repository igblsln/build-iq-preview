{"version":3,"file":"static/js/150.2a35b79d.chunk.js","mappings":"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","sources":["../../../modules/projects/dist/esm/main/cost_code/CreateCostCode.js"],"sourcesContent":["import React from 'react';\nimport { InputText } from 'primereact/inputtext';\nimport { useNavigate } from 'react-router-dom';\nimport { Toolbar } from 'primereact/toolbar';\nimport { Panel } from 'primereact/panel';\nimport { Button } from 'primereact/button';\nimport { Dropdown } from 'primereact/dropdown';\nimport { useForm, Controller } from \"react-hook-form\";\nimport { classNames } from \"primereact/utils\";\nconst CreateCostCode = () => {\n    const navigate = useNavigate();\n    const { control, formState: { errors }, handleSubmit, reset } = useForm();\n    const formFields = [\n        {\n            \"name\": \"costId\",\n            \"label\": \"Cost ID\",\n            \"inputType\": \"textField\",\n            \"width\": \"50%\",\n            \"error_message\": \"This Field is required\"\n        },\n        {\n            \"name\": \"costDesc\",\n            \"label\": \"Cost Description\",\n            \"inputType\": \"textField\",\n            \"width\": \"100%\",\n            \"error_message\": \"This Field is required\"\n        },\n        {\n            \"name\": \"costCategory\",\n            \"label\": \"Cost Category\",\n            \"inputType\": \"dropdown\",\n            \"width\": \"100%\",\n            \"error_message\": \"This Field is required\",\n            \"dropdownOption\": [\"Sand\", \"Cement\", \"Fittings\"]\n        },\n    ];\n    const getFormErrorMessage = (name) => {\n        return (\n        //@ts-ignore\n        errors[name] && React.createElement(\"small\", { className: \"p-error\" }, errors[name].message));\n    };\n    const addCostCode = () => {\n    };\n    return (React.createElement(\"div\", { style: { minHeight: 'calc(100vh - 63px)' } },\n        React.createElement(Panel, { headerTemplate: React.createElement(Toolbar, { style: { backgroundColor: 'white', width: '100%' }, left: React.createElement(\"h1\", null, \"New Cost Code\"), right: React.createElement(React.Fragment, null,\n                    React.createElement(Button, { label: 'Save', onClick: () => { var _a; return (_a = document.getElementById('form-submit')) === null || _a === void 0 ? void 0 : _a.click(); }, style: { paddingRight: 20 }, className: \"p-button-warning mr-3\" }),\n                    React.createElement(Button, { label: 'Discard', className: 'p-button-plain', onClick: () => navigate(\"/projects/cost_cost\") })) }) },\n            React.createElement(\"div\", { className: \"card\" },\n                React.createElement(\"form\", { onSubmit: handleSubmit(addCostCode), style: { width: '50%', maxHeight: '600px', overflowY: 'auto', overflowX: 'hidden' } },\n                    formFields.map((d) => {\n                        return (React.createElement(\"div\", { className: \"flex\" },\n                            React.createElement(\"div\", { className: 'col-4' },\n                                React.createElement(\"label\", { htmlFor: d.name, style: { fontSize: 16, marginTop: 20 }, \n                                    //@ts-ignore \n                                    className: classNames({ \"p-error\": errors[d.name] }) }, d.label)),\n                            React.createElement(\"div\", { className: \"col-8\" },\n                                React.createElement(\"span\", { className: \"p-float-label\" },\n                                    d.inputType === \"textField\" && (React.createElement(Controller, { name: d.name, control: control, rules: { required: d.error_message }, render: ({ field, fieldState }) => (React.createElement(InputText\n                                        //@ts-ignore \n                                        , Object.assign({ \n                                            //@ts-ignore \n                                            id: field[d.name] }, field, { style: { width: d.width || \"100%\" }, className: classNames({ 'p-invalid': fieldState.invalid }) }))) })),\n                                    d.inputType === \"dropdown\" && (React.createElement(Controller, { name: d.name, control: control, rules: { required: 'This field is required' }, render: ({ field, fieldState }) => {\n                                            return (React.createElement(Dropdown\n                                            // @ts-ignore \n                                            , { \n                                                // @ts-ignore \n                                                id: field[d.name], value: field.value, style: { width: d.width || \"100%\" }, onChange: (e) => field.onChange(e.value), options: d.dropdownOption, className: classNames({ 'p-invalid': fieldState.invalid }) }));\n                                        } }))),\n                                getFormErrorMessage(d.name))));\n                    }),\n                    React.createElement(Button, { id: 'form-submit', style: { display: 'none' }, type: \"submit\", label: \"Submit\" }))))));\n};\nexport default CreateCostCode;\n"],"names":["navigate","useNavigate","useForm","control","errors","formState","handleSubmit","reset","React","style","minHeight","Panel","headerTemplate","Toolbar","backgroundColor","width","left","right","Button","label","onClick","_a","document","getElementById","click","paddingRight","className","onSubmit","maxHeight","overflowY","overflowX","map","d","htmlFor","name","fontSize","marginTop","classNames","inputType","Controller","rules","required","error_message","render","field","fieldState","InputText","Object","assign","id","invalid","Dropdown","value","onChange","e","options","dropdownOption","message","display","type"],"sourceRoot":""}